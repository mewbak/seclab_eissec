
;; Function main (main)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 20 n_edges 25 count 20 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS
    r58: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r58,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a1(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a2(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a5(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a6(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a7(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a8(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a9(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a10(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a11(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a12(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a13(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a14(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a15(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a16(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a17(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a18(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a19(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a20(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a21(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a22(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a23(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a24(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8

   Insn 109(l0): point = 1
   Insn 108(l0): point = 3
   Insn 104(l0): point = 6
   Insn 103(l0): point = 8
   Insn 102(l0): point = 10
   Insn 101(l0): point = 12
   Insn 100(l0): point = 14
   Insn 99(l0): point = 16
   Insn 98(l0): point = 18
   Insn 121(l0): point = 21
   Insn 94(l0): point = 23
   Insn 93(l0): point = 25
   Insn 92(l0): point = 27
   Insn 90(l0): point = 30
   Insn 89(l0): point = 32
   Insn 85(l0): point = 35
   Insn 83(l0): point = 38
   Insn 82(l0): point = 40
   Insn 81(l0): point = 42
   Insn 77(l0): point = 45
   Insn 74(l0): point = 48
   Insn 73(l0): point = 50
   Insn 72(l0): point = 52
   Insn 71(l0): point = 54
   Insn 69(l0): point = 57
   Insn 68(l0): point = 59
   Insn 67(l0): point = 61
   Insn 63(l0): point = 64
   Insn 62(l0): point = 66
   Insn 61(l0): point = 68
   Insn 60(l0): point = 70
   Insn 59(l0): point = 72
   Insn 58(l0): point = 74
   Insn 119(l0): point = 77
   Insn 54(l0): point = 79
   Insn 53(l0): point = 81
   Insn 52(l0): point = 83
   Insn 51(l0): point = 85
   Insn 50(l0): point = 87
   Insn 49(l0): point = 89
   Insn 48(l0): point = 91
   Insn 47(l0): point = 93
   Insn 46(l0): point = 95
   Insn 44(l0): point = 98
   Insn 43(l0): point = 100
   Insn 42(l0): point = 102
   Insn 41(l0): point = 104
   Insn 40(l0): point = 106
   Insn 39(l0): point = 108
   Insn 117(l0): point = 111
   Insn 35(l0): point = 113
   Insn 115(l0): point = 116
   Insn 31(l0): point = 118
   Insn 29(l0): point = 121
   Insn 28(l0): point = 123
   Insn 24(l0): point = 126
   Insn 23(l0): point = 128
   Insn 22(l0): point = 130
   Insn 21(l0): point = 132
   Insn 20(l0): point = 134
   Insn 19(l0): point = 136
   Insn 18(l0): point = 138
   Insn 113(l0): point = 141
   Insn 14(l0): point = 143
   Insn 13(l0): point = 145
   Insn 12(l0): point = 147
   Insn 11(l0): point = 149
   Insn 10(l0): point = 151
   Insn 9(l0): point = 153
   Insn 8(l0): point = 155
   Insn 7(l0): point = 157
   Insn 6(l0): point = 159
   Insn 5(l0): point = 161
 a0(r67): [11..14]
 a1(r66): [13..16]
 a2(r82): [17..18]
 a3(r81): [41..42]
 a4(r65): [49..52]
 a5(r80): [49..50]
 a6(r79): [53..54]
 a7(r78): [60..61]
 a8(r77): [67..68]
 a9(r64): [67..70]
 a10(r63): [71..72]
 a11(r76): [73..74]
 a12(r75): [80..81]
 a13(r74): [84..85]
 a14(r62): [84..87]
 a15(r73): [88..89]
 a16(r72): [92..93]
 a17(r71): [94..95]
 a18(r61): [101..102]
 a19(r60): [101..106]
 a20(r70): [103..104]
 a21(r69): [107..108]
 a22(r59): [131..134]
 a23(r58): [133..136]
 a24(r68): [137..138]
Compressing live ranges: from 164 to 46 - 28%
Ranges after the compression:
 a0(r67): [0..2]
 a1(r66): [1..3]
 a2(r82): [4..5]
 a3(r81): [6..7]
 a4(r65): [8..10]
 a5(r80): [8..9]
 a6(r79): [11..12]
 a7(r78): [13..14]
 a8(r77): [15..16]
 a9(r64): [15..17]
 a10(r63): [18..19]
 a11(r76): [20..21]
 a12(r75): [22..23]
 a13(r74): [24..25]
 a14(r62): [24..26]
 a15(r73): [27..28]
 a16(r72): [29..30]
 a17(r71): [31..32]
 a18(r61): [33..34]
 a19(r60): [33..37]
 a20(r70): [35..36]
 a21(r69): [38..39]
 a22(r59): [40..42]
 a23(r58): [41..43]
 a24(r68): [44..45]
  regions=6, blocks=20, points=46
    allocnos=25, copies=0, conflicts=0, ranges=25
Disposition:
   23:r58  l0     1   22:r59  l0     0   19:r60  l0     1   18:r61  l0     0
   14:r62  l0     1   10:r63  l0     0    9:r64  l0     1    4:r65  l0     1
    1:r66  l0     1    0:r67  l0     0   24:r68  l0     0   21:r69  l0     0
   20:r70  l0     0   17:r71  l0     0   16:r72  l0     0   15:r73  l0     0
   13:r74  l0     0   12:r75  l0     0   11:r76  l0     0    8:r77  l0     0
    7:r78  l0     0    6:r79  l0     0    5:r80  l0     0    3:r81  l0     0
    2:r82  l0     0
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 
insn=6, live_throughout: 7, dead_or_set: 
insn=7, live_throughout: 7, dead_or_set: 
insn=8, live_throughout: 7, dead_or_set: 
insn=9, live_throughout: 7, dead_or_set: 
insn=10, live_throughout: 7, dead_or_set: 
insn=11, live_throughout: 7, dead_or_set: 0
insn=12, live_throughout: 7, dead_or_set: 
insn=13, live_throughout: 7, dead_or_set: 0
insn=14, live_throughout: 7, dead_or_set: 
insn=113, live_throughout: 7, dead_or_set: 
insn=27, live_throughout: 7, dead_or_set: 
insn=18, live_throughout: 7, dead_or_set: 68
insn=19, live_throughout: 7, dead_or_set: 58, 68
insn=20, live_throughout: 7, 58, dead_or_set: 59
insn=21, live_throughout: 7, 59, dead_or_set: 58
insn=22, live_throughout: 7, dead_or_set: 59
insn=23, live_throughout: 7, dead_or_set: 0
insn=24, live_throughout: 7, dead_or_set: 
insn=25, live_throughout: 7, dead_or_set: 
insn=28, live_throughout: 7, dead_or_set: 
insn=29, live_throughout: 7, dead_or_set: 
insn=31, live_throughout: 7, dead_or_set: 
insn=115, live_throughout: 7, dead_or_set: 
insn=88, live_throughout: 7, dead_or_set: 
insn=35, live_throughout: 7, dead_or_set: 
insn=117, live_throughout: 7, dead_or_set: 
insn=80, live_throughout: 7, dead_or_set: 
insn=39, live_throughout: 7, dead_or_set: 69
insn=40, live_throughout: 7, dead_or_set: 60, 69
insn=41, live_throughout: 7, 60, dead_or_set: 70
insn=42, live_throughout: 7, 60, dead_or_set: 61, 70
insn=43, live_throughout: 7, dead_or_set: 60, 61
insn=44, live_throughout: 7, dead_or_set: 
insn=46, live_throughout: 7, dead_or_set: 71
insn=47, live_throughout: 7, dead_or_set: 71, 72
insn=48, live_throughout: 7, dead_or_set: 72
insn=49, live_throughout: 7, dead_or_set: 73
insn=50, live_throughout: 7, dead_or_set: 62, 73
insn=51, live_throughout: 7, 62, dead_or_set: 74
insn=52, live_throughout: 7, dead_or_set: 62, 74
insn=53, live_throughout: 7, dead_or_set: 75
insn=54, live_throughout: 7, dead_or_set: 75
insn=119, live_throughout: 7, dead_or_set: 
insn=66, live_throughout: 7, dead_or_set: 
insn=58, live_throughout: 7, dead_or_set: 76
insn=59, live_throughout: 7, dead_or_set: 63, 76
insn=60, live_throughout: 7, dead_or_set: 63, 64
insn=61, live_throughout: 7, 64, dead_or_set: 77
insn=62, live_throughout: 7, dead_or_set: 64, 77
insn=63, live_throughout: 7, dead_or_set: 
insn=64, live_throughout: 7, dead_or_set: 
insn=67, live_throughout: 7, dead_or_set: 78
insn=68, live_throughout: 7, dead_or_set: 78
insn=69, live_throughout: 7, dead_or_set: 
insn=71, live_throughout: 7, dead_or_set: 79
insn=72, live_throughout: 7, dead_or_set: 65, 79
insn=73, live_throughout: 7, 65, dead_or_set: 80
insn=74, live_throughout: 7, dead_or_set: 65, 80
insn=75, live_throughout: 7, dead_or_set: 
insn=77, live_throughout: 7, dead_or_set: 
insn=78, live_throughout: 7, dead_or_set: 
insn=81, live_throughout: 7, dead_or_set: 81
insn=82, live_throughout: 7, dead_or_set: 81
insn=83, live_throughout: 7, dead_or_set: 
insn=85, live_throughout: 7, dead_or_set: 
insn=86, live_throughout: 7, dead_or_set: 
insn=89, live_throughout: 7, dead_or_set: 
insn=90, live_throughout: 7, dead_or_set: 
insn=92, live_throughout: 7, dead_or_set: 
insn=93, live_throughout: 7, dead_or_set: 0
insn=94, live_throughout: 7, dead_or_set: 
insn=121, live_throughout: 7, dead_or_set: 
insn=107, live_throughout: 7, dead_or_set: 
insn=98, live_throughout: 7, dead_or_set: 82
insn=99, live_throughout: 7, dead_or_set: 66, 82
insn=100, live_throughout: 7, 66, dead_or_set: 67
insn=101, live_throughout: 7, 67, dead_or_set: 66
insn=102, live_throughout: 7, dead_or_set: 67
insn=103, live_throughout: 7, dead_or_set: 0
insn=104, live_throughout: 7, dead_or_set: 
insn=105, live_throughout: 7, dead_or_set: 
insn=108, live_throughout: 7, dead_or_set: 
insn=109, live_throughout: 7, dead_or_set: 
changing reg in insn 19
changing reg in insn 21
changing reg in insn 20
changing reg in insn 22
changing reg in insn 40
changing reg in insn 43
changing reg in insn 42
changing reg in insn 43
changing reg in insn 50
changing reg in insn 52
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 62
changing reg in insn 72
changing reg in insn 74
changing reg in insn 99
changing reg in insn 101
changing reg in insn 100
changing reg in insn 102
changing reg in insn 18
changing reg in insn 19
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 67
changing reg in insn 68
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 81
changing reg in insn 82
changing reg in insn 98
changing reg in insn 99
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 93.
verify found no changes in insn with uid = 103.
(note 1 0 3 NOTE_INSN_DELETED)

(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 insertion.c:5 (set (mem/s/j:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [0 arr+0 S4 A32])
        (const_int 25 [0x19])) 44 {*movsi_1} (nil))

(insn 6 5 7 2 insertion.c:5 (set (mem/s/j:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [0 arr+4 S4 A32])
        (const_int 17 [0x11])) 44 {*movsi_1} (nil))

(insn 7 6 8 2 insertion.c:5 (set (mem/s/j:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [0 arr+8 S4 A32])
        (const_int 31 [0x1f])) 44 {*movsi_1} (nil))

(insn 8 7 9 2 insertion.c:5 (set (mem/s/j:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 40 [0x28])) [0 arr+12 S4 A32])
        (const_int 13 [0xd])) 44 {*movsi_1} (nil))

(insn 9 8 10 2 insertion.c:5 (set (mem/s/j:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 44 [0x2c])) [0 arr+16 S4 A32])
        (const_int 2 [0x2])) 44 {*movsi_1} (nil))

(insn 10 9 11 2 insertion.c:8 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <string_cst 0xb77a5a00>)) 44 {*movsi_1} (nil))

(call_insn 11 10 12 2 insertion.c:8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x41]  <function_decl 0xb77f7280 __builtin_puts>) [0 S1 A8])
            (const_int 4 [0x4]))) 697 {*call_value_0} (nil)
    (nil))

(insn 12 11 13 2 insertion.c:9 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <string_cst 0xb78e6790>)) 44 {*movsi_1} (nil))

(call_insn 13 12 14 2 insertion.c:9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x41]  <function_decl 0xb77f7280 __builtin_puts>) [0 S1 A8])
            (const_int 4 [0x4]))) 697 {*call_value_0} (nil)
    (nil))

(insn 14 13 113 2 insertion.c:11 (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [0 i+0 S4 A32])
        (const_int 0 [0x0])) 44 {*movsi_1} (nil))

(jump_insn 113 14 114 2 insertion.c:11 (set (pc)
        (label_ref 25)) 478 {jump} (nil)
 -> 25)

(barrier 114 113 27)

(code_label 27 114 17 3 3 "" [1 uses])

(note 17 27 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 18 17 19 3 insertion.c:12 (set (reg:SI 0 ax [68])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [0 i+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 19 18 20 3 insertion.c:12 (set (reg:SI 1 dx [orig:58 D.2533 ] [58])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [68])
                        (const_int 4 [0x4]))
                    (reg/f:SI 7 sp))
                (const_int 28 [0x1c])) [0 arr S4 A32])) 44 {*movsi_1} (nil))

(insn 20 19 21 3 insertion.c:12 (set (reg/f:SI 0 ax [orig:59 D.2534 ] [59])
        (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <string_cst 0xb78576ac>)) 44 {*movsi_1} (nil))

(insn 21 20 22 3 insertion.c:12 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 1 dx [orig:58 D.2533 ] [58])) 44 {*movsi_1} (nil))

(insn 22 21 23 3 insertion.c:12 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:59 D.2534 ] [59])) 44 {*movsi_1} (nil))

(call_insn 23 22 24 3 insertion.c:12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0xb77f3f00 printf>) [0 S1 A8])
            (const_int 8 [0x8]))) 697 {*call_value_0} (nil)
    (nil))

(insn 24 23 25 3 insertion.c:11 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 60 [0x3c])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 60 [0x3c])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (nil))

(code_label 25 24 26 4 2 "" [1 uses])

(note 26 25 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 28 26 29 4 insertion.c:11 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 60 [0x3c])) [0 i+0 S4 A32])
            (const_int 4 [0x4]))) 6 {*cmpsi_1} (nil))

(jump_insn 29 28 30 4 insertion.c:11 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 27)
            (pc))) 465 {*jcc_1} (nil)
 -> 27)

(note 30 29 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 31 30 115 5 insertion.c:14 (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) 44 {*movsi_1} (nil))

(jump_insn 115 31 116 5 insertion.c:14 (set (pc)
        (label_ref 86)) 478 {jump} (nil)
 -> 86)

(barrier 116 115 88)

(code_label 88 116 34 6 10 "" [1 uses])

(note 34 88 35 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 35 34 117 6 insertion.c:16 (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 56 [0x38])) [0 j+0 S4 A32])
        (const_int 0 [0x0])) 44 {*movsi_1} (nil))

(jump_insn 117 35 118 6 insertion.c:16 (set (pc)
        (label_ref 78)) 478 {jump} (nil)
 -> 78)

(barrier 118 117 80)

(code_label 80 118 38 7 9 "" [1 uses])

(note 38 80 39 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 39 38 40 7 insertion.c:18 (set (reg:SI 0 ax [69])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 56 [0x38])) [0 j+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 40 39 41 7 insertion.c:18 (set (reg:SI 1 dx [orig:60 D.2535 ] [60])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [69])
                        (const_int 4 [0x4]))
                    (reg/f:SI 7 sp))
                (const_int 28 [0x1c])) [0 arr S4 A32])) 44 {*movsi_1} (nil))

(insn 41 40 42 7 insertion.c:18 (set (reg:SI 0 ax [70])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [0 i+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 42 41 43 7 insertion.c:18 (set (reg:SI 0 ax [orig:61 D.2536 ] [61])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [70])
                        (const_int 4 [0x4]))
                    (reg/f:SI 7 sp))
                (const_int 28 [0x1c])) [0 arr S4 A32])) 44 {*movsi_1} (nil))

(insn 43 42 44 7 insertion.c:18 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:60 D.2535 ] [60])
            (reg:SI 0 ax [orig:61 D.2536 ] [61]))) 6 {*cmpsi_1} (nil))

(jump_insn 44 43 45 7 insertion.c:18 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 75)
            (pc))) 465 {*jcc_1} (nil)
 -> 75)

(note 45 44 46 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 46 45 47 8 insertion.c:20 (set (reg:SI 0 ax [71])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 56 [0x38])) [0 j+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 47 46 48 8 insertion.c:20 (set (reg:SI 0 ax [72])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [71])
                        (const_int 4 [0x4]))
                    (reg/f:SI 7 sp))
                (const_int 28 [0x1c])) [0 arr S4 A32])) 44 {*movsi_1} (nil))

(insn 48 47 49 8 insertion.c:20 (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 48 [0x30])) [0 temp+0 S4 A32])
        (reg:SI 0 ax [72])) 44 {*movsi_1} (nil))

(insn 49 48 50 8 insertion.c:21 (set (reg:SI 0 ax [73])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [0 i+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 50 49 51 8 insertion.c:21 (set (reg:SI 1 dx [orig:62 D.2539 ] [62])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [73])
                        (const_int 4 [0x4]))
                    (reg/f:SI 7 sp))
                (const_int 28 [0x1c])) [0 arr S4 A32])) 44 {*movsi_1} (nil))

(insn 51 50 52 8 insertion.c:21 (set (reg:SI 0 ax [74])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 56 [0x38])) [0 j+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 52 51 53 8 insertion.c:21 (set (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [74])
                        (const_int 4 [0x4]))
                    (reg/f:SI 7 sp))
                (const_int 28 [0x1c])) [0 arr S4 A32])
        (reg:SI 1 dx [orig:62 D.2539 ] [62])) 44 {*movsi_1} (nil))

(insn 53 52 54 8 insertion.c:23 (set (reg:SI 0 ax [75])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [0 i+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 54 53 119 8 insertion.c:23 (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [0 k+0 S4 A32])
        (reg:SI 0 ax [75])) 44 {*movsi_1} (nil))

(jump_insn 119 54 120 8 insertion.c:23 (set (pc)
        (label_ref 64)) 478 {jump} (nil)
 -> 64)

(barrier 120 119 66)

(code_label 66 120 57 9 8 "" [1 uses])

(note 57 66 58 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 58 57 59 9 insertion.c:24 (set (reg:SI 0 ax [76])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [0 k+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 59 58 60 9 insertion.c:24 (parallel [
            (set (reg:SI 0 ax [orig:63 D.2540 ] [63])
                (plus:SI (reg:SI 0 ax [76])
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffff4])) [0 k+0 S4 A32])
            (const_int -1 [0xffffffff]))
        (nil)))

(insn 60 59 61 9 insertion.c:24 (set (reg:SI 1 dx [orig:64 D.2541 ] [64])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [orig:63 D.2540 ] [63])
                        (const_int 4 [0x4]))
                    (reg/f:SI 7 sp))
                (const_int 28 [0x1c])) [0 arr S4 A32])) 44 {*movsi_1} (nil))

(insn 61 60 62 9 insertion.c:24 (set (reg:SI 0 ax [77])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [0 k+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 62 61 63 9 insertion.c:24 (set (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [77])
                        (const_int 4 [0x4]))
                    (reg/f:SI 7 sp))
                (const_int 28 [0x1c])) [0 arr S4 A32])
        (reg:SI 1 dx [orig:64 D.2541 ] [64])) 44 {*movsi_1} (nil))

(insn 63 62 64 9 insertion.c:23 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 52 [0x34])) [0 k+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 52 [0x34])) [0 k+0 S4 A32])
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (nil))

(code_label 64 63 65 10 7 "" [1 uses])

(note 65 64 67 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 67 65 68 10 insertion.c:23 (set (reg:SI 0 ax [78])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [0 k+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 68 67 69 10 insertion.c:23 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [78])
            (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 56 [0x38])) [0 j+0 S4 A32]))) 6 {*cmpsi_1} (nil))

(jump_insn 69 68 70 10 insertion.c:23 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 66)
            (pc))) 465 {*jcc_1} (nil)
 -> 66)

(note 70 69 71 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 71 70 72 11 insertion.c:26 (set (reg:SI 0 ax [79])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [0 k+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 72 71 73 11 insertion.c:26 (parallel [
            (set (reg:SI 1 dx [orig:65 D.2542 ] [65])
                (plus:SI (reg:SI 0 ax [79])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffff4])) [0 k+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))

(insn 73 72 74 11 insertion.c:26 (set (reg:SI 0 ax [80])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 48 [0x30])) [0 temp+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 74 73 75 11 insertion.c:26 (set (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:65 D.2542 ] [65])
                        (const_int 4 [0x4]))
                    (reg/f:SI 7 sp))
                (const_int 28 [0x1c])) [0 arr S4 A32])
        (reg:SI 0 ax [80])) 44 {*movsi_1} (nil))

(code_label 75 74 76 12 6 "" [1 uses])

(note 76 75 77 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 77 76 78 12 insertion.c:16 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 56 [0x38])) [0 j+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 56 [0x38])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (nil))

(code_label 78 77 79 13 5 "" [1 uses])

(note 79 78 81 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 81 79 82 13 insertion.c:16 (set (reg:SI 0 ax [81])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 56 [0x38])) [0 j+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 82 81 83 13 insertion.c:16 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [81])
            (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 60 [0x3c])) [0 i+0 S4 A32]))) 6 {*cmpsi_1} (nil))

(jump_insn 83 82 84 13 insertion.c:16 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 80)
            (pc))) 465 {*jcc_1} (nil)
 -> 80)

(note 84 83 85 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 85 84 86 14 insertion.c:14 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 60 [0x3c])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 60 [0x3c])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (nil))

(code_label 86 85 87 15 4 "" [1 uses])

(note 87 86 89 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 89 87 90 15 insertion.c:14 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 60 [0x3c])) [0 i+0 S4 A32])
            (const_int 4 [0x4]))) 6 {*cmpsi_1} (nil))

(jump_insn 90 89 91 15 insertion.c:14 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 88)
            (pc))) 465 {*jcc_1} (nil)
 -> 88)

(note 91 90 92 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 92 91 93 16 insertion.c:31 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <string_cst 0xb78e67e8>)) 44 {*movsi_1} (nil))

(call_insn 93 92 94 16 insertion.c:31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x41]  <function_decl 0xb77f7280 __builtin_puts>) [0 S1 A8])
            (const_int 4 [0x4]))) 697 {*call_value_0} (nil)
    (nil))

(insn 94 93 121 16 insertion.c:33 (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [0 i+0 S4 A32])
        (const_int 0 [0x0])) 44 {*movsi_1} (nil))

(jump_insn 121 94 122 16 insertion.c:33 (set (pc)
        (label_ref 105)) 478 {jump} (nil)
 -> 105)

(barrier 122 121 107)

(code_label 107 122 97 17 12 "" [1 uses])

(note 97 107 98 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 98 97 99 17 insertion.c:34 (set (reg:SI 0 ax [82])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [0 i+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 99 98 100 17 insertion.c:34 (set (reg:SI 1 dx [orig:66 D.2543 ] [66])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [82])
                        (const_int 4 [0x4]))
                    (reg/f:SI 7 sp))
                (const_int 28 [0x1c])) [0 arr S4 A32])) 44 {*movsi_1} (nil))

(insn 100 99 101 17 insertion.c:34 (set (reg/f:SI 0 ax [orig:67 D.2544 ] [67])
        (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <string_cst 0xb78576ac>)) 44 {*movsi_1} (nil))

(insn 101 100 102 17 insertion.c:34 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 1 dx [orig:66 D.2543 ] [66])) 44 {*movsi_1} (nil))

(insn 102 101 103 17 insertion.c:34 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:67 D.2544 ] [67])) 44 {*movsi_1} (nil))

(call_insn 103 102 104 17 insertion.c:34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0xb77f3f00 printf>) [0 S1 A8])
            (const_int 8 [0x8]))) 697 {*call_value_0} (nil)
    (nil))

(insn 104 103 105 17 insertion.c:33 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 60 [0x3c])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 60 [0x3c])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (nil))

(code_label 105 104 106 18 11 "" [1 uses])

(note 106 105 108 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 108 106 109 18 insertion.c:33 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 60 [0x3c])) [0 i+0 S4 A32])
            (const_int 4 [0x4]))) 6 {*cmpsi_1} (nil))

(jump_insn 109 108 112 18 insertion.c:33 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 465 {*jcc_1} (nil)
 -> 107)

(note 112 109 123 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(note 123 112 0 NOTE_INSN_DELETED)

;; Function main (main)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 30 n_edges 35 count 30 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r87: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r87,l0) best GENERAL_REGS, cover GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r86,l0) best GENERAL_REGS, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a28 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a29 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS
    r58: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r58,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a1(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a2(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a5(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a6(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a7(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a8(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a9(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a10(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a11(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a12(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a13(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a14(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a15(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a16(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a17(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a18(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a19(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a20(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a21(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a22(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a23(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a24(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a25(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a26(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a27(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a28(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a29(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8

   Insn 132(l0): point = 0
   Insn 109(l0): point = 3
   Insn 108(l0): point = 5
   Insn 104(l0): point = 8
   Insn 103(l0): point = 10
   Insn 102(l0): point = 12
   Insn 161(l0): point = 15
   Insn 160(l0): point = 18
   Insn 159(l0): point = 20
   Insn 158(l0): point = 22
   Insn 101(l0): point = 24
   Insn 100(l0): point = 26
   Insn 99(l0): point = 28
   Insn 98(l0): point = 30
   Insn 182(l0): point = 33
   Insn 94(l0): point = 35
   Insn 93(l0): point = 37
   Insn 92(l0): point = 39
   Insn 155(l0): point = 42
   Insn 154(l0): point = 45
   Insn 153(l0): point = 47
   Insn 152(l0): point = 49
   Insn 90(l0): point = 52
   Insn 89(l0): point = 54
   Insn 85(l0): point = 57
   Insn 83(l0): point = 60
   Insn 82(l0): point = 62
   Insn 81(l0): point = 64
   Insn 77(l0): point = 67
   Insn 74(l0): point = 70
   Insn 73(l0): point = 72
   Insn 124(l0): point = 74
   Insn 71(l0): point = 76
   Insn 69(l0): point = 79
   Insn 68(l0): point = 81
   Insn 67(l0): point = 83
   Insn 63(l0): point = 86
   Insn 62(l0): point = 88
   Insn 61(l0): point = 90
   Insn 60(l0): point = 92
   Insn 59(l0): point = 94
   Insn 58(l0): point = 96
   Insn 180(l0): point = 99
   Insn 54(l0): point = 101
   Insn 53(l0): point = 103
   Insn 52(l0): point = 105
   Insn 51(l0): point = 107
   Insn 50(l0): point = 109
   Insn 49(l0): point = 111
   Insn 48(l0): point = 113
   Insn 47(l0): point = 115
   Insn 46(l0): point = 117
   Insn 44(l0): point = 120
   Insn 43(l0): point = 122
   Insn 42(l0): point = 124
   Insn 41(l0): point = 126
   Insn 40(l0): point = 128
   Insn 39(l0): point = 130
   Insn 178(l0): point = 133
   Insn 35(l0): point = 135
   Insn 176(l0): point = 138
   Insn 31(l0): point = 140
   Insn 29(l0): point = 143
   Insn 28(l0): point = 145
   Insn 24(l0): point = 148
   Insn 23(l0): point = 150
   Insn 22(l0): point = 152
   Insn 149(l0): point = 155
   Insn 148(l0): point = 158
   Insn 147(l0): point = 160
   Insn 146(l0): point = 162
   Insn 21(l0): point = 164
   Insn 20(l0): point = 166
   Insn 19(l0): point = 168
   Insn 18(l0): point = 170
   Insn 174(l0): point = 173
   Insn 14(l0): point = 175
   Insn 13(l0): point = 177
   Insn 12(l0): point = 179
   Insn 143(l0): point = 182
   Insn 142(l0): point = 185
   Insn 141(l0): point = 187
   Insn 140(l0): point = 189
   Insn 11(l0): point = 191
   Insn 10(l0): point = 193
   Insn 137(l0): point = 196
   Insn 136(l0): point = 199
   Insn 135(l0): point = 201
   Insn 134(l0): point = 203
   Insn 9(l0): point = 205
   Insn 8(l0): point = 207
   Insn 7(l0): point = 209
   Insn 6(l0): point = 211
   Insn 5(l0): point = 213
 a0(r67): [18..26] [13..14]
 a1(r87): [21..22]
 a2(r66): [25..28]
 a3(r82): [29..30]
 a4(r86): [48..49]
 a5(r81): [63..64]
 a6(r65): [71..74]
 a7(r80): [71..72]
 a8(r79): [75..76]
 a9(r78): [82..83]
 a10(r77): [89..90]
 a11(r64): [89..92]
 a12(r63): [93..94]
 a13(r76): [95..96]
 a14(r75): [102..103]
 a15(r74): [106..107]
 a16(r62): [106..109]
 a17(r73): [110..111]
 a18(r72): [114..115]
 a19(r71): [116..117]
 a20(r61): [123..124]
 a21(r60): [123..128]
 a22(r70): [125..126]
 a23(r69): [129..130]
 a24(r59): [158..166] [153..154]
 a25(r85): [161..162]
 a26(r58): [165..168]
 a27(r68): [169..170]
 a28(r84): [188..189]
 a29(r83): [202..203]
Compressing live ranges: from 216 to 60 - 27%
Ranges after the compression:
 a0(r67): [2..6] [0..1]
 a1(r87): [3..4]
 a2(r66): [5..7]
 a3(r82): [8..9]
 a4(r86): [10..11]
 a5(r81): [12..13]
 a6(r65): [14..16]
 a7(r80): [14..15]
 a8(r79): [17..18]
 a9(r78): [19..20]
 a10(r77): [21..22]
 a11(r64): [21..23]
 a12(r63): [24..25]
 a13(r76): [26..27]
 a14(r75): [28..29]
 a15(r74): [30..31]
 a16(r62): [30..32]
 a17(r73): [33..34]
 a18(r72): [35..36]
 a19(r71): [37..38]
 a20(r61): [39..40]
 a21(r60): [39..43]
 a22(r70): [41..42]
 a23(r69): [44..45]
 a24(r59): [48..52] [46..47]
 a25(r85): [49..50]
 a26(r58): [51..53]
 a27(r68): [54..55]
 a28(r84): [56..57]
 a29(r83): [58..59]
  regions=6, blocks=30, points=60
    allocnos=30, copies=0, conflicts=0, ranges=32
Disposition:
   26:r58  l0     1   24:r59  l0     0   21:r60  l0     1   20:r61  l0     0
   16:r62  l0     1   12:r63  l0     0   11:r64  l0     1    6:r65  l0     0
    2:r66  l0     1    0:r67  l0     0   27:r68  l0     0   23:r69  l0     0
   22:r70  l0     0   19:r71  l0     0   18:r72  l0     0   17:r73  l0     0
   15:r74  l0     0   14:r75  l0     0   13:r76  l0     0   10:r77  l0     0
    9:r78  l0     0    8:r79  l0     0    7:r80  l0     1    5:r81  l0     0
    3:r82  l0     0   29:r83  l0     0   28:r84  l0     0   25:r85  l0     1
    4:r86  l0     0    1:r87  l0     1
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 
insn=6, live_throughout: 7, dead_or_set: 
insn=7, live_throughout: 7, dead_or_set: 
insn=8, live_throughout: 7, dead_or_set: 
insn=9, live_throughout: 7, dead_or_set: 
insn=134, live_throughout: 7, dead_or_set: 83
insn=135, live_throughout: 7, dead_or_set: 83
insn=136, live_throughout: 7, dead_or_set: 
insn=137, live_throughout: 7, dead_or_set: 
insn=139, live_throughout: 7, dead_or_set: 
insn=10, live_throughout: 7, dead_or_set: 
insn=11, live_throughout: 7, dead_or_set: 0
insn=140, live_throughout: 7, dead_or_set: 84
insn=141, live_throughout: 7, dead_or_set: 84
insn=142, live_throughout: 7, dead_or_set: 
insn=143, live_throughout: 7, dead_or_set: 
insn=145, live_throughout: 7, dead_or_set: 
insn=12, live_throughout: 7, dead_or_set: 
insn=13, live_throughout: 7, dead_or_set: 0
insn=14, live_throughout: 7, dead_or_set: 
insn=174, live_throughout: 7, dead_or_set: 
insn=27, live_throughout: 7, dead_or_set: 
insn=18, live_throughout: 7, dead_or_set: 68
insn=19, live_throughout: 7, dead_or_set: 58, 68
insn=20, live_throughout: 7, 58, dead_or_set: 59
insn=21, live_throughout: 7, 59, dead_or_set: 58
insn=146, live_throughout: 7, 59, dead_or_set: 85
insn=147, live_throughout: 7, 59, dead_or_set: 85
insn=148, live_throughout: 7, 59, dead_or_set: 
insn=149, live_throughout: 7, dead_or_set: 
insn=151, live_throughout: 7, 59, dead_or_set: 
insn=22, live_throughout: 7, dead_or_set: 59
insn=23, live_throughout: 7, dead_or_set: 0
insn=24, live_throughout: 7, dead_or_set: 
insn=25, live_throughout: 7, dead_or_set: 
insn=28, live_throughout: 7, dead_or_set: 
insn=29, live_throughout: 7, dead_or_set: 
insn=31, live_throughout: 7, dead_or_set: 
insn=176, live_throughout: 7, dead_or_set: 
insn=88, live_throughout: 7, dead_or_set: 
insn=35, live_throughout: 7, dead_or_set: 
insn=178, live_throughout: 7, dead_or_set: 
insn=80, live_throughout: 7, dead_or_set: 
insn=39, live_throughout: 7, dead_or_set: 69
insn=40, live_throughout: 7, dead_or_set: 60, 69
insn=41, live_throughout: 7, 60, dead_or_set: 70
insn=42, live_throughout: 7, 60, dead_or_set: 61, 70
insn=43, live_throughout: 7, dead_or_set: 60, 61
insn=44, live_throughout: 7, dead_or_set: 
insn=46, live_throughout: 7, dead_or_set: 71
insn=47, live_throughout: 7, dead_or_set: 71, 72
insn=48, live_throughout: 7, dead_or_set: 72
insn=49, live_throughout: 7, dead_or_set: 73
insn=50, live_throughout: 7, dead_or_set: 62, 73
insn=51, live_throughout: 7, 62, dead_or_set: 74
insn=52, live_throughout: 7, dead_or_set: 62, 74
insn=53, live_throughout: 7, dead_or_set: 75
insn=54, live_throughout: 7, dead_or_set: 75
insn=180, live_throughout: 7, dead_or_set: 
insn=66, live_throughout: 7, dead_or_set: 
insn=58, live_throughout: 7, dead_or_set: 76
insn=59, live_throughout: 7, dead_or_set: 63, 76
insn=60, live_throughout: 7, dead_or_set: 63, 64
insn=61, live_throughout: 7, 64, dead_or_set: 77
insn=62, live_throughout: 7, dead_or_set: 64, 77
insn=63, live_throughout: 7, dead_or_set: 
insn=64, live_throughout: 7, dead_or_set: 
insn=67, live_throughout: 7, dead_or_set: 78
insn=68, live_throughout: 7, dead_or_set: 78
insn=69, live_throughout: 7, dead_or_set: 
insn=71, live_throughout: 7, dead_or_set: 79
insn=124, live_throughout: 7, dead_or_set: 65, 79
insn=73, live_throughout: 7, 65, dead_or_set: 80
insn=74, live_throughout: 7, dead_or_set: 65, 80
insn=75, live_throughout: 7, dead_or_set: 
insn=77, live_throughout: 7, dead_or_set: 
insn=78, live_throughout: 7, dead_or_set: 
insn=81, live_throughout: 7, dead_or_set: 81
insn=82, live_throughout: 7, dead_or_set: 81
insn=83, live_throughout: 7, dead_or_set: 
insn=85, live_throughout: 7, dead_or_set: 
insn=86, live_throughout: 7, dead_or_set: 
insn=89, live_throughout: 7, dead_or_set: 
insn=90, live_throughout: 7, dead_or_set: 
insn=152, live_throughout: 7, dead_or_set: 86
insn=153, live_throughout: 7, dead_or_set: 86
insn=154, live_throughout: 7, dead_or_set: 
insn=155, live_throughout: 7, dead_or_set: 
insn=157, live_throughout: 7, dead_or_set: 
insn=92, live_throughout: 7, dead_or_set: 
insn=93, live_throughout: 7, dead_or_set: 0
insn=94, live_throughout: 7, dead_or_set: 
insn=182, live_throughout: 7, dead_or_set: 
insn=107, live_throughout: 7, dead_or_set: 
insn=98, live_throughout: 7, dead_or_set: 82
insn=99, live_throughout: 7, dead_or_set: 66, 82
insn=100, live_throughout: 7, 66, dead_or_set: 67
insn=101, live_throughout: 7, 67, dead_or_set: 66
insn=158, live_throughout: 7, 67, dead_or_set: 87
insn=159, live_throughout: 7, 67, dead_or_set: 87
insn=160, live_throughout: 7, 67, dead_or_set: 
insn=161, live_throughout: 7, dead_or_set: 
insn=163, live_throughout: 7, 67, dead_or_set: 
insn=102, live_throughout: 7, dead_or_set: 67
insn=103, live_throughout: 7, dead_or_set: 0
insn=104, live_throughout: 7, dead_or_set: 
insn=105, live_throughout: 7, dead_or_set: 
insn=108, live_throughout: 7, dead_or_set: 
insn=109, live_throughout: 7, dead_or_set: 
insn=132, live_throughout: 7, dead_or_set: 
changing reg in insn 19
changing reg in insn 21
changing reg in insn 20
changing reg in insn 22
changing reg in insn 40
changing reg in insn 43
changing reg in insn 42
changing reg in insn 43
changing reg in insn 50
changing reg in insn 52
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 62
changing reg in insn 124
changing reg in insn 74
changing reg in insn 99
changing reg in insn 101
changing reg in insn 100
changing reg in insn 102
changing reg in insn 18
changing reg in insn 19
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 67
changing reg in insn 68
changing reg in insn 71
changing reg in insn 124
changing reg in insn 73
changing reg in insn 74
changing reg in insn 81
changing reg in insn 82
changing reg in insn 98
changing reg in insn 99
changing reg in insn 134
changing reg in insn 135
changing reg in insn 140
changing reg in insn 141
changing reg in insn 146
changing reg in insn 147
changing reg in insn 152
changing reg in insn 153
changing reg in insn 158
changing reg in insn 159
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 137.
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 143.
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 149.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 155.
verify found no changes in insn with uid = 93.
verify found no changes in insn with uid = 161.
verify found no changes in insn with uid = 103.
(note 1 0 3 NOTE_INSN_DELETED)

(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 insertion.c:5 (set (mem/s/j:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [0 arr+0 S4 A32])
        (const_int 25 [0x19])) 44 {*movsi_1} (nil))

(insn 6 5 7 2 insertion.c:5 (set (mem/s/j:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [0 arr+4 S4 A32])
        (const_int 17 [0x11])) 44 {*movsi_1} (nil))

(insn 7 6 8 2 insertion.c:5 (set (mem/s/j:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [0 arr+8 S4 A32])
        (const_int 31 [0x1f])) 44 {*movsi_1} (nil))

(insn 8 7 9 2 insertion.c:5 (set (mem/s/j:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 40 [0x28])) [0 arr+12 S4 A32])
        (const_int 13 [0xd])) 44 {*movsi_1} (nil))

(insn 9 8 134 2 insertion.c:5 (set (mem/s/j:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 44 [0x2c])) [0 arr+16 S4 A32])
        (const_int 2 [0x2])) 44 {*movsi_1} (nil))

(insn 134 9 135 2 (set:SI (reg:SI 0 ax [83])
        (reg/f:SI 7 sp)) 44 {*movsi_1} (nil))

(insn 135 134 136 2 (set (reg:CCZ 17 flags [0])
        (compare:CCZ (reg:SI 0 ax [83])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 136 135 164 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags [0])
                (const_int 0 [0x0]))
            (label_ref 139)
            (pc))) 465 {*jcc_1} (nil)
 -> 139)

(note 164 136 137 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(call_insn 137 164 138 3 insertion.c:8 (call (mem:QI (symbol_ref:SI ("abort")) [0 S1 A8])
        (const_int 0 [0x0])) 484 {*call_0} (nil)
    (nil))

(barrier 138 137 139)

(code_label 139 138 165 4 13 "" [1 uses])

(note 165 139 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 10 165 11 4 insertion.c:8 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <string_cst 0xb77a5a00>)) 44 {*movsi_1} (nil))

(call_insn 11 10 140 4 insertion.c:8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x41]  <function_decl 0xb77f7280 __builtin_puts>) [0 S1 A8])
            (const_int 4 [0x4]))) 697 {*call_value_0} (nil)
    (nil))

(insn 140 11 141 4 (set:SI (reg:SI 0 ax [84])
        (reg/f:SI 7 sp)) 44 {*movsi_1} (nil))

(insn 141 140 142 4 (set (reg:CCZ 17 flags [0])
        (compare:CCZ (reg:SI 0 ax [84])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 142 141 166 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags [0])
                (const_int 0 [0x0]))
            (label_ref 145)
            (pc))) 465 {*jcc_1} (nil)
 -> 145)

(note 166 142 143 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn 143 166 144 5 insertion.c:9 (call (mem:QI (symbol_ref:SI ("abort")) [0 S1 A8])
        (const_int 0 [0x0])) 484 {*call_0} (nil)
    (nil))

(barrier 144 143 145)

(code_label 145 144 167 6 14 "" [1 uses])

(note 167 145 12 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 12 167 13 6 insertion.c:9 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <string_cst 0xb78e6790>)) 44 {*movsi_1} (nil))

(call_insn 13 12 14 6 insertion.c:9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x41]  <function_decl 0xb77f7280 __builtin_puts>) [0 S1 A8])
            (const_int 4 [0x4]))) 697 {*call_value_0} (nil)
    (nil))

(insn 14 13 174 6 insertion.c:11 (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [0 i+0 S4 A32])
        (const_int 0 [0x0])) 44 {*movsi_1} (nil))

(jump_insn 174 14 175 6 insertion.c:11 (set (pc)
        (label_ref 25)) 478 {jump} (nil)
 -> 25)

(barrier 175 174 27)

(code_label 27 175 17 7 3 "" [1 uses])

(note 17 27 18 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 18 17 19 7 insertion.c:12 (set (reg:SI 0 ax [68])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [0 i+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 19 18 20 7 insertion.c:12 (set (reg:SI 1 dx [orig:58 D.2533 ] [58])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [68])
                        (const_int 4 [0x4]))
                    (reg/f:SI 7 sp))
                (const_int 28 [0x1c])) [0 arr S4 A32])) 44 {*movsi_1} (nil))

(insn 20 19 21 7 insertion.c:12 (set (reg/f:SI 0 ax [orig:59 D.2534 ] [59])
        (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <string_cst 0xb78576ac>)) 44 {*movsi_1} (nil))

(insn 21 20 146 7 insertion.c:12 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 1 dx [orig:58 D.2533 ] [58])) 44 {*movsi_1} (nil))

(insn 146 21 147 7 (set:SI (reg:SI 1 dx [85])
        (reg/f:SI 7 sp)) 44 {*movsi_1} (nil))

(insn 147 146 148 7 (set (reg:CCZ 17 flags [0])
        (compare:CCZ (reg:SI 1 dx [85])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 148 147 168 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags [0])
                (const_int 0 [0x0]))
            (label_ref 151)
            (pc))) 465 {*jcc_1} (nil)
 -> 151)

(note 168 148 149 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(call_insn 149 168 150 8 insertion.c:12 (call (mem:QI (symbol_ref:SI ("abort")) [0 S1 A8])
        (const_int 0 [0x0])) 484 {*call_0} (nil)
    (nil))

(barrier 150 149 151)

(code_label 151 150 169 9 15 "" [1 uses])

(note 169 151 22 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 22 169 23 9 insertion.c:12 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:59 D.2534 ] [59])) 44 {*movsi_1} (nil))

(call_insn 23 22 24 9 insertion.c:12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0xb77f3f00 printf>) [0 S1 A8])
            (const_int 8 [0x8]))) 697 {*call_value_0} (nil)
    (nil))

(insn 24 23 25 9 insertion.c:11 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 60 [0x3c])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 60 [0x3c])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (nil))

(code_label 25 24 26 10 2 "" [1 uses])

(note 26 25 28 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 28 26 29 10 insertion.c:11 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 60 [0x3c])) [0 i+0 S4 A32])
            (const_int 4 [0x4]))) 6 {*cmpsi_1} (nil))

(jump_insn 29 28 30 10 insertion.c:11 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 27)
            (pc))) 465 {*jcc_1} (nil)
 -> 27)

(note 30 29 31 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 31 30 176 11 insertion.c:14 (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) 44 {*movsi_1} (nil))

(jump_insn 176 31 177 11 insertion.c:14 (set (pc)
        (label_ref 86)) 478 {jump} (nil)
 -> 86)

(barrier 177 176 88)

(code_label 88 177 34 12 10 "" [1 uses])

(note 34 88 35 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 35 34 178 12 insertion.c:16 (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 56 [0x38])) [0 j+0 S4 A32])
        (const_int 0 [0x0])) 44 {*movsi_1} (nil))

(jump_insn 178 35 179 12 insertion.c:16 (set (pc)
        (label_ref 78)) 478 {jump} (nil)
 -> 78)

(barrier 179 178 80)

(code_label 80 179 38 13 9 "" [1 uses])

(note 38 80 39 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 39 38 40 13 insertion.c:18 (set (reg:SI 0 ax [69])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 56 [0x38])) [0 j+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 40 39 41 13 insertion.c:18 (set (reg:SI 1 dx [orig:60 D.2535 ] [60])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [69])
                        (const_int 4 [0x4]))
                    (reg/f:SI 7 sp))
                (const_int 28 [0x1c])) [0 arr S4 A32])) 44 {*movsi_1} (nil))

(insn 41 40 42 13 insertion.c:18 (set (reg:SI 0 ax [70])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [0 i+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 42 41 43 13 insertion.c:18 (set (reg:SI 0 ax [orig:61 D.2536 ] [61])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [70])
                        (const_int 4 [0x4]))
                    (reg/f:SI 7 sp))
                (const_int 28 [0x1c])) [0 arr S4 A32])) 44 {*movsi_1} (nil))

(insn 43 42 44 13 insertion.c:18 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:60 D.2535 ] [60])
            (reg:SI 0 ax [orig:61 D.2536 ] [61]))) 6 {*cmpsi_1} (nil))

(jump_insn 44 43 45 13 insertion.c:18 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 75)
            (pc))) 465 {*jcc_1} (nil)
 -> 75)

(note 45 44 46 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 46 45 47 14 insertion.c:20 (set (reg:SI 0 ax [71])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 56 [0x38])) [0 j+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 47 46 48 14 insertion.c:20 (set (reg:SI 0 ax [72])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [71])
                        (const_int 4 [0x4]))
                    (reg/f:SI 7 sp))
                (const_int 28 [0x1c])) [0 arr S4 A32])) 44 {*movsi_1} (nil))

(insn 48 47 49 14 insertion.c:20 (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 48 [0x30])) [0 temp+0 S4 A32])
        (reg:SI 0 ax [72])) 44 {*movsi_1} (nil))

(insn 49 48 50 14 insertion.c:21 (set (reg:SI 0 ax [73])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [0 i+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 50 49 51 14 insertion.c:21 (set (reg:SI 1 dx [orig:62 D.2539 ] [62])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [73])
                        (const_int 4 [0x4]))
                    (reg/f:SI 7 sp))
                (const_int 28 [0x1c])) [0 arr S4 A32])) 44 {*movsi_1} (nil))

(insn 51 50 52 14 insertion.c:21 (set (reg:SI 0 ax [74])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 56 [0x38])) [0 j+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 52 51 53 14 insertion.c:21 (set (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [74])
                        (const_int 4 [0x4]))
                    (reg/f:SI 7 sp))
                (const_int 28 [0x1c])) [0 arr S4 A32])
        (reg:SI 1 dx [orig:62 D.2539 ] [62])) 44 {*movsi_1} (nil))

(insn 53 52 54 14 insertion.c:23 (set (reg:SI 0 ax [75])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [0 i+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 54 53 180 14 insertion.c:23 (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [0 k+0 S4 A32])
        (reg:SI 0 ax [75])) 44 {*movsi_1} (nil))

(jump_insn 180 54 181 14 insertion.c:23 (set (pc)
        (label_ref 64)) 478 {jump} (nil)
 -> 64)

(barrier 181 180 66)

(code_label 66 181 57 15 8 "" [1 uses])

(note 57 66 58 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 58 57 59 15 insertion.c:24 (set (reg:SI 0 ax [76])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [0 k+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 59 58 60 15 insertion.c:24 (parallel [
            (set (reg:SI 0 ax [orig:63 D.2540 ] [63])
                (plus:SI (reg:SI 0 ax [76])
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffff4])) [0 k+0 S4 A32])
            (const_int -1 [0xffffffff]))
        (nil)))

(insn 60 59 61 15 insertion.c:24 (set (reg:SI 1 dx [orig:64 D.2541 ] [64])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [orig:63 D.2540 ] [63])
                        (const_int 4 [0x4]))
                    (reg/f:SI 7 sp))
                (const_int 28 [0x1c])) [0 arr S4 A32])) 44 {*movsi_1} (nil))

(insn 61 60 62 15 insertion.c:24 (set (reg:SI 0 ax [77])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [0 k+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 62 61 63 15 insertion.c:24 (set (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [77])
                        (const_int 4 [0x4]))
                    (reg/f:SI 7 sp))
                (const_int 28 [0x1c])) [0 arr S4 A32])
        (reg:SI 1 dx [orig:64 D.2541 ] [64])) 44 {*movsi_1} (nil))

(insn 63 62 64 15 insertion.c:23 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 52 [0x34])) [0 k+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 52 [0x34])) [0 k+0 S4 A32])
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (nil))

(code_label 64 63 65 16 7 "" [1 uses])

(note 65 64 67 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 67 65 68 16 insertion.c:23 (set (reg:SI 0 ax [78])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [0 k+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 68 67 69 16 insertion.c:23 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [78])
            (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 56 [0x38])) [0 j+0 S4 A32]))) 6 {*cmpsi_1} (nil))

(jump_insn 69 68 70 16 insertion.c:23 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 66)
            (pc))) 465 {*jcc_1} (nil)
 -> 66)

(note 70 69 71 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 71 70 124 17 insertion.c:26 (set (reg:SI 0 ax [79])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [0 k+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 124 71 73 17 insertion.c:26 (set (reg:SI 0 ax [orig:65 D.2542 ] [65])
        (plus:SI (reg:SI 0 ax [79])
            (const_int 1 [0x1]))) 196 {*lea_1} (nil))

(insn 73 124 74 17 insertion.c:26 (set (reg:SI 1 dx [80])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 48 [0x30])) [0 temp+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 74 73 75 17 insertion.c:26 (set (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [orig:65 D.2542 ] [65])
                        (const_int 4 [0x4]))
                    (reg/f:SI 7 sp))
                (const_int 28 [0x1c])) [0 arr S4 A32])
        (reg:SI 1 dx [80])) 44 {*movsi_1} (nil))

(code_label 75 74 76 18 6 "" [1 uses])

(note 76 75 77 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 77 76 78 18 insertion.c:16 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 56 [0x38])) [0 j+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 56 [0x38])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (nil))

(code_label 78 77 79 19 5 "" [1 uses])

(note 79 78 81 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 81 79 82 19 insertion.c:16 (set (reg:SI 0 ax [81])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 56 [0x38])) [0 j+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 82 81 83 19 insertion.c:16 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [81])
            (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 60 [0x3c])) [0 i+0 S4 A32]))) 6 {*cmpsi_1} (nil))

(jump_insn 83 82 84 19 insertion.c:16 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 80)
            (pc))) 465 {*jcc_1} (nil)
 -> 80)

(note 84 83 85 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 85 84 86 20 insertion.c:14 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 60 [0x3c])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 60 [0x3c])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (nil))

(code_label 86 85 87 21 4 "" [1 uses])

(note 87 86 89 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 89 87 90 21 insertion.c:14 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 60 [0x3c])) [0 i+0 S4 A32])
            (const_int 4 [0x4]))) 6 {*cmpsi_1} (nil))

(jump_insn 90 89 91 21 insertion.c:14 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 88)
            (pc))) 465 {*jcc_1} (nil)
 -> 88)

(note 91 90 152 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 152 91 153 22 (set:SI (reg:SI 0 ax [86])
        (reg/f:SI 7 sp)) 44 {*movsi_1} (nil))

(insn 153 152 154 22 (set (reg:CCZ 17 flags [0])
        (compare:CCZ (reg:SI 0 ax [86])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 154 153 170 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags [0])
                (const_int 0 [0x0]))
            (label_ref 157)
            (pc))) 465 {*jcc_1} (nil)
 -> 157)

(note 170 154 155 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(call_insn 155 170 156 23 insertion.c:31 (call (mem:QI (symbol_ref:SI ("abort")) [0 S1 A8])
        (const_int 0 [0x0])) 484 {*call_0} (nil)
    (nil))

(barrier 156 155 157)

(code_label 157 156 171 24 16 "" [1 uses])

(note 171 157 92 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 92 171 93 24 insertion.c:31 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <string_cst 0xb78e67e8>)) 44 {*movsi_1} (nil))

(call_insn 93 92 94 24 insertion.c:31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x41]  <function_decl 0xb77f7280 __builtin_puts>) [0 S1 A8])
            (const_int 4 [0x4]))) 697 {*call_value_0} (nil)
    (nil))

(insn 94 93 182 24 insertion.c:33 (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [0 i+0 S4 A32])
        (const_int 0 [0x0])) 44 {*movsi_1} (nil))

(jump_insn 182 94 183 24 insertion.c:33 (set (pc)
        (label_ref 105)) 478 {jump} (nil)
 -> 105)

(barrier 183 182 107)

(code_label 107 183 97 25 12 "" [1 uses])

(note 97 107 98 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 98 97 99 25 insertion.c:34 (set (reg:SI 0 ax [82])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [0 i+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 99 98 100 25 insertion.c:34 (set (reg:SI 1 dx [orig:66 D.2543 ] [66])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [82])
                        (const_int 4 [0x4]))
                    (reg/f:SI 7 sp))
                (const_int 28 [0x1c])) [0 arr S4 A32])) 44 {*movsi_1} (nil))

(insn 100 99 101 25 insertion.c:34 (set (reg/f:SI 0 ax [orig:67 D.2544 ] [67])
        (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <string_cst 0xb78576ac>)) 44 {*movsi_1} (nil))

(insn 101 100 158 25 insertion.c:34 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 1 dx [orig:66 D.2543 ] [66])) 44 {*movsi_1} (nil))

(insn 158 101 159 25 (set:SI (reg:SI 1 dx [87])
        (reg/f:SI 7 sp)) 44 {*movsi_1} (nil))

(insn 159 158 160 25 (set (reg:CCZ 17 flags [0])
        (compare:CCZ (reg:SI 1 dx [87])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 160 159 172 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags [0])
                (const_int 0 [0x0]))
            (label_ref 163)
            (pc))) 465 {*jcc_1} (nil)
 -> 163)

(note 172 160 161 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(call_insn 161 172 162 26 insertion.c:34 (call (mem:QI (symbol_ref:SI ("abort")) [0 S1 A8])
        (const_int 0 [0x0])) 484 {*call_0} (nil)
    (nil))

(barrier 162 161 163)

(code_label 163 162 173 27 17 "" [1 uses])

(note 173 163 102 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 102 173 103 27 insertion.c:34 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:67 D.2544 ] [67])) 44 {*movsi_1} (nil))

(call_insn 103 102 104 27 insertion.c:34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0xb77f3f00 printf>) [0 S1 A8])
            (const_int 8 [0x8]))) 697 {*call_value_0} (nil)
    (nil))

(insn 104 103 105 27 insertion.c:33 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 60 [0x3c])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 60 [0x3c])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (nil))

(code_label 105 104 106 28 11 "" [1 uses])

(note 106 105 108 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 108 106 109 28 insertion.c:33 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 60 [0x3c])) [0 i+0 S4 A32])
            (const_int 4 [0x4]))) 6 {*cmpsi_1} (nil))

(jump_insn 109 108 112 28 insertion.c:33 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 465 {*jcc_1} (nil)
 -> 107)

(note 112 109 132 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(jump_insn 132 112 133 29 insertion.c:36 (return) 490 {return_internal} (nil))

(barrier 133 132 123)

(note 123 133 184 NOTE_INSN_DELETED)

(note 184 123 0 NOTE_INSN_DELETED)
